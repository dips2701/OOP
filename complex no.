#include<iostream>
using namespace std;

class complex 
{
    public:
    float real,img;

    complex()
    {
        real = 0;
        img = 0;
    }

    complex operator + (complex);
    complex operator * (complex);
    friend ostream & operator << (ostream &, complex &);
    friend istream & operator >> (istream &, complex &);
};

//overload operator >>
istream & operator >> (istream & iss, complex & obj){
    iss>>obj.real;
    iss>>obj.img;
    return iss;
}

//overload operator >>

ostream & operator << (ostream & outt, complex & obj){
    outt<<""<<obj.real;
    outt<<"+"<<obj.img<<"i";
    return outt;
}

//overload operator +

complex complex :: operator + (complex obj){
    complex temp;
    temp.real = real + obj.real;
    temp.img = img + obj.img;
    return(temp);
}

//overload operator *

complex complex :: operator * (complex obj){
    complex temp;
    temp.real = real*obj.real - img*obj.img;
    temp.img = real*obj.img + img*obj.real;
    return(temp);
}

int main()
{
    complex a,b,c,d;
    cout<<"\n1st complex no.";
    cin>>a;
    cout<<"\n2nd complex no.";
    cin>>b;
    c = a + b;
    cout<<"\naddition is : "<<c;
    d = a * b;
    cout<<"\nmultiplication is : "<<d;
    return 0;
}
